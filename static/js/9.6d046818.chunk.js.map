{"version":3,"sources":["page/statistics/components/Map.js"],"names":["popScale","scaleLinear","domain","range","useStyles","makeStyles","theme","_map","map","height","width","transition","Object","D_Repos_tube_rocktube_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__","breakpoints","up","MapChild","_ref","favourite","classes","countries","forEach","ele","push","apply","D_Repos_tube_rocktube_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","country","countryDetail","renameKeys","UK","USA","countBy","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","react_simple_maps__WEBPACK_IMPORTED_MODULE_4__","projectionConfig","scale","rotation","className","center","disablePanning","geography","geographies","projection","i","id","key","style","default","fill","hasOwnProperty","properties","name","stroke","strokeWidth","outline","hover","pressed"],"mappings":"wKAaMA,EAAWC,cACdC,OAAO,CAAC,EAAG,GAAI,MACfC,MAAM,CAAC,UAAW,UAAW,YAE1BC,EAAYC,YAAW,SAAAC,GAAK,IAAAC,EAAA,MAAK,CACrCC,KAAGD,EAAA,CACDE,OAAQ,OACRC,MAAO,OACPC,WAAU,oBAHTC,OAAAC,EAAA,EAAAD,CAAAL,EAIAD,EAAMQ,YAAYC,GAAG,MAAQ,CAC5BL,MAAO,QALRE,OAAAC,EAAA,EAAAD,CAAAL,EAOAD,EAAMQ,YAAYC,GAAG,MAAQ,CAC5BL,MAAO,QARRE,OAAAC,EAAA,EAAAD,CAAAL,EAUAD,EAAMQ,YAAYC,GAAG,MAAQ,CAC5BL,MAAO,QAXRH,MA0EUS,UAlDf,SAAAC,GAAgC,IAAZC,EAAYD,EAAZC,UACZC,EAAUf,IACVgB,EAAY,GAElBF,EAAUG,QAAQ,SAAAC,GAAG,OAAIF,EAAUG,KAAVC,MAAAJ,EAASR,OAAAa,EAAA,EAAAb,CAASU,EAAII,YAC/C,IAAMC,EAAgBC,YAAW,CAACC,GAAM,iBAAkBC,IAAO,iBAAkBC,YAAQX,IAE3F,OACEY,EAAAC,EAAAC,cAACC,EAAA,cAAD,CACEC,iBAAkB,CAChBC,MAAO,IACPC,SAAU,EAAE,GAAI,EAAG,IAErBC,UAAWpB,EAAQX,KAEnBwB,EAAAC,EAAAC,cAACC,EAAA,cAAD,CAAeK,OAAQ,CAAC,EAAG,IAAKC,gBAAc,GAC5CT,EAAAC,EAAAC,cAACC,EAAA,YAAD,CAAaO,UAAU,kBACpB,SAACC,EAAaC,GAAd,OAA6BD,EAAYnC,IAAI,SAACkC,EAAWG,GAAZ,MAAmC,QAAjBH,EAAUI,IACxEd,EAAAC,EAAAC,cAACC,EAAA,UAAD,CACEY,IAAKF,EACLH,UAAWA,EACXE,WAAYA,EACZI,MAAO,CACLC,QAAS,CACPC,KAAMvB,EAAcwB,eAAeT,EAAUU,WAAWC,MAAQrD,EAAS2B,EAAce,EAAUU,WAAWC,OAAS,UACrHC,OAAQ,UACRC,YAAa,IACbC,QAAS,QAEXC,MAAO,CACLP,KAAM,UACNI,OAAQ,UACRC,YAAa,IACbC,QAAS,QAEXE,QAAS,CACPR,KAAM,UACNI,OAAQ,UACRC,YAAa,IACbC,QAAS","file":"static/js/9.6d046818.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { makeStyles } from '@material-ui/styles'\r\nimport {\r\n  ComposableMap,\r\n  ZoomableGroup,\r\n  Geographies,\r\n  Geography,\r\n} from 'react-simple-maps'\r\nimport { scaleLinear } from 'd3-scale'\r\n\r\nimport { countBy, renameKeys } from 'utils'\r\n\r\nconst popScale = scaleLinear()\r\n  .domain([0, 10, 100])\r\n  .range(['#CFD8DC', '#607D8B', '#37474F'])\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  map: {\r\n    height: 'auto',\r\n    width: '100%',\r\n    transition: `all 0.5s ease-in`,\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: '80%',\r\n    },\r\n    [theme.breakpoints.up('md')]: {\r\n      width: '70%',\r\n    },\r\n    [theme.breakpoints.up('lg')]: {\r\n      width: '60%',\r\n    },\r\n  }\r\n}))\r\n\r\n/**\r\n * MapChild\r\n * @type {{favourite: Array}}\r\n */\r\nMapChild.propTypes = {\r\n  favourite: PropTypes.array.isRequired\r\n}\r\n\r\nfunction MapChild ({favourite}) {\r\n  const classes = useStyles()\r\n  const countries = []\r\n\r\n  favourite.forEach(ele => countries.push(...ele.country))\r\n  const countryDetail = renameKeys({'UK': 'United Kingdom', 'USA': 'United States'}, countBy(countries))\r\n\r\n  return (\r\n    <ComposableMap\r\n      projectionConfig={{\r\n        scale: 205,\r\n        rotation: [-11, 0, 0],\r\n      }}\r\n      className={classes.map}\r\n    >\r\n      <ZoomableGroup center={[0, 20]} disablePanning>\r\n        <Geographies geography=\"world-50m.json\">\r\n          {(geographies, projection) => geographies.map((geography, i) => geography.id !== 'ATA' && (\r\n            <Geography\r\n              key={i}\r\n              geography={geography}\r\n              projection={projection}\r\n              style={{\r\n                default: {\r\n                  fill: countryDetail.hasOwnProperty(geography.properties.name) ? popScale(countryDetail[geography.properties.name]) : '#ECEFF1',\r\n                  stroke: '#607D8B',\r\n                  strokeWidth: 0.75,\r\n                  outline: 'none',\r\n                },\r\n                hover: {\r\n                  fill: '#ECEFF1',\r\n                  stroke: '#607D8B',\r\n                  strokeWidth: 0.75,\r\n                  outline: 'none',\r\n                },\r\n                pressed: {\r\n                  fill: '#ECEFF1',\r\n                  stroke: '#607D8B',\r\n                  strokeWidth: 0.75,\r\n                  outline: 'none',\r\n                },\r\n              }}\r\n            />\r\n          ))}\r\n        </Geographies>\r\n      </ZoomableGroup>\r\n    </ComposableMap>\r\n  )\r\n}\r\n\r\nexport default MapChild"],"sourceRoot":""}